// <auto-generated />
using System;
using CGServer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CGServer.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CGEntity.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("CGEntity.Entities.Favorecido", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Favorecidos");
                });

            modelBuilder.Entity("CGEntity.Entities.Fornecedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Fornecedores");
                });

            modelBuilder.Entity("CGEntity.Entities.Instituicao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Instituicoes");
                });

            modelBuilder.Entity("CGEntity.Entities.Lancamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime2");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("FavorecidoId")
                        .HasColumnType("int");

                    b.Property<int?>("FornecedorId")
                        .HasColumnType("int");

                    b.Property<int?>("InstituicaoId")
                        .HasColumnType("int");

                    b.Property<int?>("ModalidadeId")
                        .HasColumnType("int");

                    b.Property<int?>("PagadorId")
                        .HasColumnType("int");

                    b.Property<bool>("Recorrente")
                        .HasColumnType("bit");

                    b.Property<int?>("SubCategoriaId")
                        .HasColumnType("int");

                    b.Property<double>("Valor")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.HasIndex("FavorecidoId");

                    b.HasIndex("FornecedorId");

                    b.HasIndex("InstituicaoId");

                    b.HasIndex("ModalidadeId");

                    b.HasIndex("PagadorId");

                    b.HasIndex("SubCategoriaId");

                    b.ToTable("Lancamentos");
                });

            modelBuilder.Entity("CGEntity.Entities.Modalidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Modalidades");
                });

            modelBuilder.Entity("CGEntity.Entities.Pagador", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Pagadores");
                });

            modelBuilder.Entity("CGEntity.Entities.SubCategoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("SubCategorias");
                });

            modelBuilder.Entity("CGEntity.Entities.Lancamento", b =>
                {
                    b.HasOne("CGEntity.Entities.Categoria", null)
                        .WithMany("Lancamentos")
                        .HasForeignKey("CategoriaId");

                    b.HasOne("CGEntity.Entities.Favorecido", null)
                        .WithMany("Lancamentos")
                        .HasForeignKey("FavorecidoId");

                    b.HasOne("CGEntity.Entities.Fornecedor", null)
                        .WithMany("Lancamentos")
                        .HasForeignKey("FornecedorId");

                    b.HasOne("CGEntity.Entities.Instituicao", null)
                        .WithMany("Lancamentos")
                        .HasForeignKey("InstituicaoId");

                    b.HasOne("CGEntity.Entities.Modalidade", null)
                        .WithMany("Lancamentos")
                        .HasForeignKey("ModalidadeId");

                    b.HasOne("CGEntity.Entities.Pagador", null)
                        .WithMany("Lancamentos")
                        .HasForeignKey("PagadorId");

                    b.HasOne("CGEntity.Entities.SubCategoria", null)
                        .WithMany("Lancamentos")
                        .HasForeignKey("SubCategoriaId");
                });

            modelBuilder.Entity("CGEntity.Entities.SubCategoria", b =>
                {
                    b.HasOne("CGEntity.Entities.Categoria", null)
                        .WithMany("Subcategorias")
                        .HasForeignKey("CategoriaId");
                });

            modelBuilder.Entity("CGEntity.Entities.Categoria", b =>
                {
                    b.Navigation("Lancamentos");

                    b.Navigation("Subcategorias");
                });

            modelBuilder.Entity("CGEntity.Entities.Favorecido", b =>
                {
                    b.Navigation("Lancamentos");
                });

            modelBuilder.Entity("CGEntity.Entities.Fornecedor", b =>
                {
                    b.Navigation("Lancamentos");
                });

            modelBuilder.Entity("CGEntity.Entities.Instituicao", b =>
                {
                    b.Navigation("Lancamentos");
                });

            modelBuilder.Entity("CGEntity.Entities.Modalidade", b =>
                {
                    b.Navigation("Lancamentos");
                });

            modelBuilder.Entity("CGEntity.Entities.Pagador", b =>
                {
                    b.Navigation("Lancamentos");
                });

            modelBuilder.Entity("CGEntity.Entities.SubCategoria", b =>
                {
                    b.Navigation("Lancamentos");
                });
#pragma warning restore 612, 618
        }
    }
}
